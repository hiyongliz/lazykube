// package main

// import (
// 	"fmt"
// 	"os"
// 	"strings"

// 	tea "github.com/charmbracelet/bubbletea"
// 	"github.com/charmbracelet/lipgloss"
// 	"github.com/charmbracelet/lipgloss/table"
// )

// const (
// 	minWidth     = 80
// 	minHeight    = 24
// 	progressWidth = 40
// )

// // Color represents RGB color
// type Color struct {
// 	R, G, B int
// }

// // Interpolate returns a color between two colors by the given ratio (0.0 to 1.0)
// func (c Color) Interpolate(other Color, ratio float64) Color {
// 	return Color{
// 		R: int(float64(c.R) + ratio*float64(other.R-c.R)),
// 		G: int(float64(c.G) + ratio*float64(other.G-c.G)),
// 		B: int(float64(c.B) + ratio*float64(other.B-c.B)),
// 	}
// }

// // ToHex converts RGB color to hex string
// func (c Color) ToHex() string {
// 	return fmt.Sprintf("#%02X%02X%02X", c.R, c.G, c.B)
// }

// var (
// 	headers = []string{"#", "NAME", "TYPE 1", "TYPE 2", "PROGRESS", "JAPANESE", "OFFICIAL ROM."}
// 	rows    = [][]string{
// 		{"1", "Bulbasaur", "Grass", "Poison", "60", "フシギダネ", "Bulbasaur"},
// 		{"2", "Ivysaur", "Grass", "Poison", "75", "フシギソウ", "Ivysaur"},
// 		{"3", "Venusaur", "Grass", "Poison", "100", "フシギバナ", "Venusaur"},
// 		{"4", "Charmander", "Fire", "", "45", "ヒトカゲ", "Hitokage"},
// 		{"5", "Charmeleon", "Fire", "", "70", "リザード", "Lizardo"},
// 		{"6", "Charizard", "Fire", "Flying", "100", "リザードン", "Lizardon"},
// 		{"7", "Squirtle", "Water", "", "40", "ゼニガメ", "Zenigame"},
// 		{"8", "Wartortle", "Water", "", "65", "カメール", "Kameil"},
// 		{"9", "Blastoise", "Water", "", "90", "カメックス", "Kamex"},
// 	}

// 	// 渐变色起始和结束颜色
// 	startColor = Color{1, 190, 133}   // #01BE85
// 	endColor   = Color{0, 67, 47}     // #00432F
// 	emptyColor = Color{32, 32, 32}    // #202020



// )

// type model struct {
// 	table    *table.Table
// 	width    int
// 	height   int
// 	selected int
// }

// // renderGradientProgressBar creates a progress bar with gradient colors
// func renderGradientProgressBar(percent int, width int, isEven bool) string {
// 	if percent < 0 {
// 		percent = 0
// 	}
// 	if percent > 100 {
// 		percent = 100
// 	}

// 	filled := width * percent / 100
// 	empty := width - filled
	
// 	var result strings.Builder

// 	// 为每个填充的方块计算渐变色
// 	for i := 0; i < filled; i++ {
// 		ratio := float64(i) / float64(width-1)
// 		if isEven {
// 			// 偶数行使用较暗的渐变
// 			color := startColor.Interpolate(endColor, ratio*0.7)
// 			style := lipgloss.NewStyle().Foreground(lipgloss.Color(color.ToHex()))
// 			result.WriteString(style.Render("■"))
// 		} else {
// 			// 奇数行使用较亮的渐变
// 			color := startColor.Interpolate(endColor, ratio*0.7) // 减小渐变程度使颜色更亮
// 			style := lipgloss.NewStyle().Foreground(lipgloss.Color(color.ToHex()))
// 			result.WriteString(style.Render("■"))
// 		}
// 	}

// 	// 添加未填充的部分
// 	if empty > 0 {
// 		emptyStyle := lipgloss.NewStyle().Foreground(lipgloss.Color(emptyColor.ToHex()))
// 		result.WriteString(emptyStyle.Render(strings.Repeat("■", empty)))
// 	}

// 	return result.String()
// }

// func (m model) Init() tea.Cmd { return nil }

// func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
// 	var cmd tea.Cmd
// 	switch msg := msg.(type) {
// 	case tea.WindowSizeMsg:
// 		m.width = max(msg.Width, minWidth)
// 		m.height = max(msg.Height, minHeight)
// 		m.table = m.table.Width(m.width).Height(m.height)
// 	case tea.KeyMsg:
// 		switch msg.String() {
// 		case "q", "ctrl+c":
// 			return m, tea.Quit
// 		case "enter":
// 			if m.selected >= 0 && m.selected < len(rows) {
// 				return m, nil
// 			}
// 		case "up":
// 			m.selected = max(0, m.selected-1)
// 		case "down":
// 			m.selected = min(len(rows)-1, m.selected+1)
// 		}
// 	}
// 	return m, cmd
// }

// func (m model) View() string {
// 	if m.width == 0 || m.height == 0 {
// 		return "Terminal too small"
// 	}
// 	return "\n" + m.table.String() + "\n"
// }

// func safeGetColor(typeStr string, colors map[string]lipgloss.Color, defaultColor lipgloss.Color) lipgloss.Color {
// 	if color, ok := colors[typeStr]; ok {
// 		return color
// 	}
// 	return defaultColor
// }

// func main() {
// 	re := lipgloss.NewRenderer(os.Stdout)
// 	baseStyle := re.NewStyle().Padding(0, 1)
// 	headerStyle := baseStyle.Foreground(lipgloss.Color("252")).Bold(true)
// 	selectedStyle := baseStyle.Foreground(lipgloss.Color("#01BE85")).Background(lipgloss.Color("#00432F"))

// 	typeColors := map[string]lipgloss.Color{
// 		"Bug":      lipgloss.Color("#D7FF87"),
// 		"Electric": lipgloss.Color("#FDFF90"),
// 		"Fire":     lipgloss.Color("#FF7698"),
// 		"Flying":   lipgloss.Color("#FF87D7"),
// 		"Grass":    lipgloss.Color("#75FBAB"),
// 		"Ground":   lipgloss.Color("#FF875F"),
// 		"Normal":   lipgloss.Color("#929292"),
// 		"Poison":   lipgloss.Color("#7D5AFC"),
// 		"Water":    lipgloss.Color("#00E2C7"),
// 	}
	
// 	dimTypeColors := map[string]lipgloss.Color{
// 		"Bug":      lipgloss.Color("#97AD64"),
// 		"Electric": lipgloss.Color("#FCFF5F"),
// 		"Fire":     lipgloss.Color("#BA5F75"),
// 		"Flying":   lipgloss.Color("#C97AB2"),
// 		"Grass":    lipgloss.Color("#59B980"),
// 		"Ground":   lipgloss.Color("#C77252"),
// 		"Normal":   lipgloss.Color("#727272"),
// 		"Poison":   lipgloss.Color("#634BD0"),
// 		"Water":    lipgloss.Color("#439F8E"),
// 	}

// 	// 创建带有渐变进度条的新行
// 	rowsWithProgress := make([][]string, len(rows))
// 	for i, row := range rows {
// 		percent := 0
// 		fmt.Sscanf(row[4], "%d", &percent)
		
// 		// 创建渐变进度条
// 		progressBar := renderGradientProgressBar(percent, progressWidth, i%2 == 0)
		
// 		// 构建新行，包含进度条
// 		newRow := make([]string, len(row))
// 		copy(newRow, row)
// 		newRow[4] = progressBar
// 		rowsWithProgress[i] = newRow
// 	}

// 	defaultColor := lipgloss.Color("252")
	
// 	t := table.New().
// 		Headers(headers...).
// 		Rows(rowsWithProgress...).
// 		BorderStyle(re.NewStyle().Foreground(lipgloss.Color("238"))).
// 		StyleFunc(func(row, col int) lipgloss.Style {
// 			if row == 0 {
// 				return headerStyle
// 			}

// 			rowIdx := row - 1
// 			if rowIdx < 0 || rowIdx >= len(rows) {
// 				return baseStyle
// 			}

// 			if rows[rowIdx][1] == "Pikachu" {
// 				return selectedStyle
// 			}

// 			even := row%2 == 0

// 			switch col {
// 			case 2, 3: // Type 1 + 2
// 				typeStr := rows[rowIdx][col]
// 				if typeStr == "" {
// 					return baseStyle
// 				}

// 				c := typeColors
// 				if even {
// 					c = dimTypeColors
// 				}

// 				color := safeGetColor(typeStr, c, defaultColor)
// 				return baseStyle.Foreground(color)
// 			case 4: // Progress column
// 				return baseStyle // 进度条已经带有样式
// 			}

// 			if even {
// 				return baseStyle.Foreground(lipgloss.Color("245"))
// 			}
// 			return baseStyle.Foreground(lipgloss.Color("252"))
// 		}).
// 		Border(lipgloss.ThickBorder())

// 	m := model{
// 		table:    t,
// 		selected: -1,
// 	}
	
// 	if _, err := tea.NewProgram(m, tea.WithAltScreen()).Run(); err != nil {
// 		fmt.Printf("Error running program: %v\n", err)
// 		os.Exit(1)
// 	}
// }

// func max(a, b int) int {
// 	if a > b {
// 		return a
// 	}
// 	return b
// }

// func min(a, b int) int {
// 	if a < b {
// 		return a
// 	}
// 	return b
// }
